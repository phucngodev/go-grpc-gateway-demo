// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsBlogInvalidId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BLOG_INVALID_ID.String() && e.Code == 500
}

func ErrorBlogInvalidId(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BLOG_INVALID_ID.String(), fmt.Sprintf(format, args...))
}

func IsEmailNotAvailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_NOT_AVAILABLE.String() && e.Code == 500
}

func ErrorEmailNotAvailable(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_EMAIL_NOT_AVAILABLE.String(), fmt.Sprintf(format, args...))
}

func IsEmailNotVerify(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_NOT_VERIFY.String() && e.Code == 500
}

func ErrorEmailNotVerify(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_EMAIL_NOT_VERIFY.String(), fmt.Sprintf(format, args...))
}

func IsPasswordNotVerify(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_NOT_VERIFY.String() && e.Code == 500
}

func ErrorPasswordNotVerify(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PASSWORD_NOT_VERIFY.String(), fmt.Sprintf(format, args...))
}

func IsTokenNotCreated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOKEN_NOT_CREATED.String() && e.Code == 500
}

func ErrorTokenNotCreated(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_TOKEN_NOT_CREATED.String(), fmt.Sprintf(format, args...))
}
